/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.light.rtc.api;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-16")
public class TDssService {

    public interface Iface {

        public int addMqinfoToAdminQu(List<String> uLogs) throws org.apache.thrift.TException;

        public int rtcStats(List<String> userLogs) throws org.apache.thrift.TException;

        public int batchStats(int start, int size) throws org.apache.thrift.TException;

        public int getAdminNodeId() throws org.apache.thrift.TException;

        public int getHealthStatus() throws org.apache.thrift.TException;

        public int getJobStatus() throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void addMqinfoToAdminQu(List<String> uLogs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void rtcStats(List<String> userLogs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void batchStats(int start, int size, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getAdminNodeId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getHealthStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getJobStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public int addMqinfoToAdminQu(List<String> uLogs) throws org.apache.thrift.TException {
            send_addMqinfoToAdminQu(uLogs);
            return recv_addMqinfoToAdminQu();
        }

        public void send_addMqinfoToAdminQu(List<String> uLogs) throws org.apache.thrift.TException {
            addMqinfoToAdminQu_args args = new addMqinfoToAdminQu_args();
            args.setULogs(uLogs);
            sendBase("addMqinfoToAdminQu", args);
        }

        public int recv_addMqinfoToAdminQu() throws org.apache.thrift.TException {
            addMqinfoToAdminQu_result result = new addMqinfoToAdminQu_result();
            receiveBase(result, "addMqinfoToAdminQu");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMqinfoToAdminQu failed: unknown result");
        }

        public int rtcStats(List<String> userLogs) throws org.apache.thrift.TException {
            send_rtcStats(userLogs);
            return recv_rtcStats();
        }

        public void send_rtcStats(List<String> userLogs) throws org.apache.thrift.TException {
            rtcStats_args args = new rtcStats_args();
            args.setUserLogs(userLogs);
            sendBase("rtcStats", args);
        }

        public int recv_rtcStats() throws org.apache.thrift.TException {
            rtcStats_result result = new rtcStats_result();
            receiveBase(result, "rtcStats");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rtcStats failed: unknown result");
        }

        public int batchStats(int start, int size) throws org.apache.thrift.TException {
            send_batchStats(start, size);
            return recv_batchStats();
        }

        public void send_batchStats(int start, int size) throws org.apache.thrift.TException {
            batchStats_args args = new batchStats_args();
            args.setStart(start);
            args.setSize(size);
            sendBase("batchStats", args);
        }

        public int recv_batchStats() throws org.apache.thrift.TException {
            batchStats_result result = new batchStats_result();
            receiveBase(result, "batchStats");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchStats failed: unknown result");
        }

        public int getAdminNodeId() throws org.apache.thrift.TException {
            send_getAdminNodeId();
            return recv_getAdminNodeId();
        }

        public void send_getAdminNodeId() throws org.apache.thrift.TException {
            getAdminNodeId_args args = new getAdminNodeId_args();
            sendBase("getAdminNodeId", args);
        }

        public int recv_getAdminNodeId() throws org.apache.thrift.TException {
            getAdminNodeId_result result = new getAdminNodeId_result();
            receiveBase(result, "getAdminNodeId");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdminNodeId failed: unknown result");
        }

        public int getHealthStatus() throws org.apache.thrift.TException {
            send_getHealthStatus();
            return recv_getHealthStatus();
        }

        public void send_getHealthStatus() throws org.apache.thrift.TException {
            getHealthStatus_args args = new getHealthStatus_args();
            sendBase("getHealthStatus", args);
        }

        public int recv_getHealthStatus() throws org.apache.thrift.TException {
            getHealthStatus_result result = new getHealthStatus_result();
            receiveBase(result, "getHealthStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHealthStatus failed: unknown result");
        }

        public int getJobStatus() throws org.apache.thrift.TException {
            send_getJobStatus();
            return recv_getJobStatus();
        }

        public void send_getJobStatus() throws org.apache.thrift.TException {
            getJobStatus_args args = new getJobStatus_args();
            sendBase("getJobStatus", args);
        }

        public int recv_getJobStatus() throws org.apache.thrift.TException {
            getJobStatus_result result = new getJobStatus_result();
            receiveBase(result, "getJobStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJobStatus failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void addMqinfoToAdminQu(List<String> uLogs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addMqinfoToAdminQu_call method_call = new addMqinfoToAdminQu_call(uLogs, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void rtcStats(List<String> userLogs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            rtcStats_call method_call = new rtcStats_call(userLogs, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void batchStats(int start, int size, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchStats_call method_call = new batchStats_call(start, size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getAdminNodeId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getAdminNodeId_call method_call = new getAdminNodeId_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getHealthStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getHealthStatus_call method_call = new getHealthStatus_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getJobStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getJobStatus_call method_call = new getJobStatus_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class addMqinfoToAdminQu_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<String> uLogs;

            public addMqinfoToAdminQu_call(List<String> uLogs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uLogs = uLogs;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMqinfoToAdminQu", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addMqinfoToAdminQu_args args = new addMqinfoToAdminQu_args();
                args.setULogs(uLogs);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addMqinfoToAdminQu();
            }
        }

        public static class rtcStats_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<String> userLogs;

            public rtcStats_call(List<String> userLogs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userLogs = userLogs;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rtcStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
                rtcStats_args args = new rtcStats_args();
                args.setUserLogs(userLogs);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_rtcStats();
            }
        }

        public static class batchStats_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int start;
            private int size;

            public batchStats_call(int start, int size, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.start = start;
                this.size = size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchStats_args args = new batchStats_args();
                args.setStart(start);
                args.setSize(size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchStats();
            }
        }

        public static class getAdminNodeId_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getAdminNodeId_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdminNodeId", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getAdminNodeId_args args = new getAdminNodeId_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAdminNodeId();
            }
        }

        public static class getHealthStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getHealthStatus_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHealthStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getHealthStatus_args args = new getHealthStatus_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getHealthStatus();
            }
        }

        public static class getJobStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getJobStatus_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getJobStatus_args args = new getJobStatus_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getJobStatus();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("addMqinfoToAdminQu", new addMqinfoToAdminQu());
            processMap.put("rtcStats", new rtcStats());
            processMap.put("batchStats", new batchStats());
            processMap.put("getAdminNodeId", new getAdminNodeId());
            processMap.put("getHealthStatus", new getHealthStatus());
            processMap.put("getJobStatus", new getJobStatus());
            return processMap;
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        public static class addMqinfoToAdminQu<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMqinfoToAdminQu_args> {
            public addMqinfoToAdminQu() {
                super("addMqinfoToAdminQu");
            }

            protected boolean isOneway() {
                return false;
            }

            public addMqinfoToAdminQu_result getResult(I iface, addMqinfoToAdminQu_args args) throws org.apache.thrift.TException {
                addMqinfoToAdminQu_result result = new addMqinfoToAdminQu_result();
                result.success = iface.addMqinfoToAdminQu(args.uLogs);
                result.setSuccessIsSet(true);
                return result;
            }

            public addMqinfoToAdminQu_args getEmptyArgsInstance() {
                return new addMqinfoToAdminQu_args();
            }
        }

        public static class rtcStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rtcStats_args> {
            public rtcStats() {
                super("rtcStats");
            }

            protected boolean isOneway() {
                return false;
            }

            public rtcStats_result getResult(I iface, rtcStats_args args) throws org.apache.thrift.TException {
                rtcStats_result result = new rtcStats_result();
                result.success = iface.rtcStats(args.userLogs);
                result.setSuccessIsSet(true);
                return result;
            }

            public rtcStats_args getEmptyArgsInstance() {
                return new rtcStats_args();
            }
        }

        public static class batchStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchStats_args> {
            public batchStats() {
                super("batchStats");
            }

            protected boolean isOneway() {
                return false;
            }

            public batchStats_result getResult(I iface, batchStats_args args) throws org.apache.thrift.TException {
                batchStats_result result = new batchStats_result();
                result.success = iface.batchStats(args.start, args.size);
                result.setSuccessIsSet(true);
                return result;
            }

            public batchStats_args getEmptyArgsInstance() {
                return new batchStats_args();
            }
        }

        public static class getAdminNodeId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdminNodeId_args> {
            public getAdminNodeId() {
                super("getAdminNodeId");
            }

            protected boolean isOneway() {
                return false;
            }

            public getAdminNodeId_result getResult(I iface, getAdminNodeId_args args) throws org.apache.thrift.TException {
                getAdminNodeId_result result = new getAdminNodeId_result();
                result.success = iface.getAdminNodeId();
                result.setSuccessIsSet(true);
                return result;
            }

            public getAdminNodeId_args getEmptyArgsInstance() {
                return new getAdminNodeId_args();
            }
        }

        public static class getHealthStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHealthStatus_args> {
            public getHealthStatus() {
                super("getHealthStatus");
            }

            protected boolean isOneway() {
                return false;
            }

            public getHealthStatus_result getResult(I iface, getHealthStatus_args args) throws org.apache.thrift.TException {
                getHealthStatus_result result = new getHealthStatus_result();
                result.success = iface.getHealthStatus();
                result.setSuccessIsSet(true);
                return result;
            }

            public getHealthStatus_args getEmptyArgsInstance() {
                return new getHealthStatus_args();
            }
        }

        public static class getJobStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJobStatus_args> {
            public getJobStatus() {
                super("getJobStatus");
            }

            protected boolean isOneway() {
                return false;
            }

            public getJobStatus_result getResult(I iface, getJobStatus_args args) throws org.apache.thrift.TException {
                getJobStatus_result result = new getJobStatus_result();
                result.success = iface.getJobStatus();
                result.setSuccessIsSet(true);
                return result;
            }

            public getJobStatus_args getEmptyArgsInstance() {
                return new getJobStatus_args();
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("addMqinfoToAdminQu", new addMqinfoToAdminQu());
            processMap.put("rtcStats", new rtcStats());
            processMap.put("batchStats", new batchStats());
            processMap.put("getAdminNodeId", new getAdminNodeId());
            processMap.put("getHealthStatus", new getHealthStatus());
            processMap.put("getJobStatus", new getJobStatus());
            return processMap;
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        public static class addMqinfoToAdminQu<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMqinfoToAdminQu_args, Integer> {
            public addMqinfoToAdminQu() {
                super("addMqinfoToAdminQu");
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addMqinfoToAdminQu_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.addMqinfoToAdminQu(args.uLogs, resultHandler);
            }

            public addMqinfoToAdminQu_args getEmptyArgsInstance() {
                return new addMqinfoToAdminQu_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        addMqinfoToAdminQu_result result = new addMqinfoToAdminQu_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        addMqinfoToAdminQu_result result = new addMqinfoToAdminQu_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }
        }

        public static class rtcStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rtcStats_args, Integer> {
            public rtcStats() {
                super("rtcStats");
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, rtcStats_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.rtcStats(args.userLogs, resultHandler);
            }

            public rtcStats_args getEmptyArgsInstance() {
                return new rtcStats_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        rtcStats_result result = new rtcStats_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        rtcStats_result result = new rtcStats_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }
        }

        public static class batchStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchStats_args, Integer> {
            public batchStats() {
                super("batchStats");
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchStats_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.batchStats(args.start, args.size, resultHandler);
            }

            public batchStats_args getEmptyArgsInstance() {
                return new batchStats_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        batchStats_result result = new batchStats_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        batchStats_result result = new batchStats_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }
        }

        public static class getAdminNodeId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdminNodeId_args, Integer> {
            public getAdminNodeId() {
                super("getAdminNodeId");
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getAdminNodeId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.getAdminNodeId(resultHandler);
            }

            public getAdminNodeId_args getEmptyArgsInstance() {
                return new getAdminNodeId_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        getAdminNodeId_result result = new getAdminNodeId_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getAdminNodeId_result result = new getAdminNodeId_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }
        }

        public static class getHealthStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHealthStatus_args, Integer> {
            public getHealthStatus() {
                super("getHealthStatus");
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getHealthStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.getHealthStatus(resultHandler);
            }

            public getHealthStatus_args getEmptyArgsInstance() {
                return new getHealthStatus_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        getHealthStatus_result result = new getHealthStatus_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getHealthStatus_result result = new getHealthStatus_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }
        }

        public static class getJobStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJobStatus_args, Integer> {
            public getJobStatus() {
                super("getJobStatus");
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getJobStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.getJobStatus(resultHandler);
            }

            public getJobStatus_args getEmptyArgsInstance() {
                return new getJobStatus_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        getJobStatus_result result = new getJobStatus_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getJobStatus_result result = new getJobStatus_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }
        }

    }

    public static class addMqinfoToAdminQu_args implements org.apache.thrift.TBase<addMqinfoToAdminQu_args, addMqinfoToAdminQu_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMqinfoToAdminQu_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMqinfoToAdminQu_args");
        private static final org.apache.thrift.protocol.TField U_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("uLogs", org.apache.thrift.protocol.TType.LIST, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new addMqinfoToAdminQu_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addMqinfoToAdminQu_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.U_LOGS, new org.apache.thrift.meta_data.FieldMetaData("uLogs", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMqinfoToAdminQu_args.class, metaDataMap);
        }

        public List<String> uLogs; // required

        public addMqinfoToAdminQu_args(
                List<String> uLogs) {
            this();
            this.uLogs = uLogs;
        }

        public addMqinfoToAdminQu_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addMqinfoToAdminQu_args(addMqinfoToAdminQu_args other) {
            if (other.isSetULogs()) {
                List<String> __this__uLogs = new ArrayList<String>(other.uLogs);
                this.uLogs = __this__uLogs;
            }
        }

        /**
         * Returns true if field uLogs is set (has been assigned a value) and false otherwise
         */
        public boolean isSetULogs() {
            return this.uLogs != null;
        }

        public int getULogsSize() {
            return (this.uLogs == null) ? 0 : this.uLogs.size();
        }

        public java.util.Iterator<String> getULogsIterator() {
            return (this.uLogs == null) ? null : this.uLogs.iterator();
        }

        public void addToULogs(String elem) {
            if (this.uLogs == null) {
                this.uLogs = new ArrayList<String>();
            }
            this.uLogs.add(elem);
        }

        public void setULogsIsSet(boolean value) {
            if (!value) {
                this.uLogs = null;
            }
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_uLogs = true && (isSetULogs());
            list.add(present_uLogs);
            if (present_uLogs)
                list.add(uLogs);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addMqinfoToAdminQu_args)
                return this.equals((addMqinfoToAdminQu_args) that);
            return false;
        }

        public boolean equals(addMqinfoToAdminQu_args that) {
            if (that == null)
                return false;

            boolean this_present_uLogs = true && this.isSetULogs();
            boolean that_present_uLogs = true && that.isSetULogs();
            if (this_present_uLogs || that_present_uLogs) {
                if (!(this_present_uLogs && that_present_uLogs))
                    return false;
                if (!this.uLogs.equals(that.uLogs))
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addMqinfoToAdminQu_args(");
            boolean first = true;

            sb.append("uLogs:");
            if (this.uLogs == null) {
                sb.append("null");
            } else {
                sb.append(this.uLogs);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(addMqinfoToAdminQu_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetULogs()).compareTo(other.isSetULogs());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetULogs()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uLogs, other.uLogs);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case U_LOGS:
                    return isSetULogs();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case U_LOGS:
                    return getULogs();

            }
            throw new IllegalStateException();
        }

        public List<String> getULogs() {
            return this.uLogs;
        }

        public addMqinfoToAdminQu_args setULogs(List<String> uLogs) {
            this.uLogs = uLogs;
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case U_LOGS:
                    if (value == null) {
                        unsetULogs();
                    } else {
                        setULogs((List<String>) value);
                    }
                    break;

            }
        }

        public addMqinfoToAdminQu_args deepCopy() {
            return new addMqinfoToAdminQu_args(this);
        }

        @Override
        public void clear() {
            this.uLogs = null;
        }

        public void unsetULogs() {
            this.uLogs = null;
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            U_LOGS((short) 1, "uLogs");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // U_LOGS
                        return U_LOGS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class addMqinfoToAdminQu_argsStandardSchemeFactory implements SchemeFactory {
            public addMqinfoToAdminQu_argsStandardScheme getScheme() {
                return new addMqinfoToAdminQu_argsStandardScheme();
            }
        }

        private static class addMqinfoToAdminQu_argsStandardScheme extends StandardScheme<addMqinfoToAdminQu_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addMqinfoToAdminQu_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // U_LOGS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.uLogs = new ArrayList<String>(_list0.size);
                                    String _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                        _elem1 = iprot.readString();
                                        struct.uLogs.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setULogsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addMqinfoToAdminQu_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.uLogs != null) {
                    oprot.writeFieldBegin(U_LOGS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uLogs.size()));
                        for (String _iter3 : struct.uLogs) {
                            oprot.writeString(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addMqinfoToAdminQu_argsTupleSchemeFactory implements SchemeFactory {
            public addMqinfoToAdminQu_argsTupleScheme getScheme() {
                return new addMqinfoToAdminQu_argsTupleScheme();
            }
        }

        private static class addMqinfoToAdminQu_argsTupleScheme extends TupleScheme<addMqinfoToAdminQu_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addMqinfoToAdminQu_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.uLogs = new ArrayList<String>(_list5.size);
                        String _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                            _elem6 = iprot.readString();
                            struct.uLogs.add(_elem6);
                        }
                    }
                    struct.setULogsIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addMqinfoToAdminQu_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetULogs()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetULogs()) {
                    {
                        oprot.writeI32(struct.uLogs.size());
                        for (String _iter4 : struct.uLogs) {
                            oprot.writeString(_iter4);
                        }
                    }
                }
            }
        }

    }

    public static class addMqinfoToAdminQu_result implements org.apache.thrift.TBase<addMqinfoToAdminQu_result, addMqinfoToAdminQu_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMqinfoToAdminQu_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMqinfoToAdminQu_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new addMqinfoToAdminQu_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addMqinfoToAdminQu_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMqinfoToAdminQu_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public addMqinfoToAdminQu_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public addMqinfoToAdminQu_result() {
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addMqinfoToAdminQu_result(addMqinfoToAdminQu_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addMqinfoToAdminQu_result)
                return this.equals((addMqinfoToAdminQu_result) that);
            return false;
        }

        public boolean equals(addMqinfoToAdminQu_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addMqinfoToAdminQu_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(addMqinfoToAdminQu_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        public int getSuccess() {
            return this.success;
        }

        public addMqinfoToAdminQu_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public addMqinfoToAdminQu_result deepCopy() {
            return new addMqinfoToAdminQu_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class addMqinfoToAdminQu_resultStandardSchemeFactory implements SchemeFactory {
            public addMqinfoToAdminQu_resultStandardScheme getScheme() {
                return new addMqinfoToAdminQu_resultStandardScheme();
            }
        }

        private static class addMqinfoToAdminQu_resultStandardScheme extends StandardScheme<addMqinfoToAdminQu_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addMqinfoToAdminQu_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addMqinfoToAdminQu_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addMqinfoToAdminQu_resultTupleSchemeFactory implements SchemeFactory {
            public addMqinfoToAdminQu_resultTupleScheme getScheme() {
                return new addMqinfoToAdminQu_resultTupleScheme();
            }
        }

        private static class addMqinfoToAdminQu_resultTupleScheme extends TupleScheme<addMqinfoToAdminQu_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addMqinfoToAdminQu_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addMqinfoToAdminQu_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }
        }

    }

    public static class rtcStats_args implements org.apache.thrift.TBase<rtcStats_args, rtcStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<rtcStats_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rtcStats_args");
        private static final org.apache.thrift.protocol.TField USER_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("userLogs", org.apache.thrift.protocol.TType.LIST, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new rtcStats_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new rtcStats_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_LOGS, new org.apache.thrift.meta_data.FieldMetaData("userLogs", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rtcStats_args.class, metaDataMap);
        }

        public List<String> userLogs; // required

        public rtcStats_args(
                List<String> userLogs) {
            this();
            this.userLogs = userLogs;
        }

        public rtcStats_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rtcStats_args(rtcStats_args other) {
            if (other.isSetUserLogs()) {
                List<String> __this__userLogs = new ArrayList<String>(other.userLogs);
                this.userLogs = __this__userLogs;
            }
        }

        /**
         * Returns true if field userLogs is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserLogs() {
            return this.userLogs != null;
        }

        public int getUserLogsSize() {
            return (this.userLogs == null) ? 0 : this.userLogs.size();
        }

        public java.util.Iterator<String> getUserLogsIterator() {
            return (this.userLogs == null) ? null : this.userLogs.iterator();
        }

        public void addToUserLogs(String elem) {
            if (this.userLogs == null) {
                this.userLogs = new ArrayList<String>();
            }
            this.userLogs.add(elem);
        }

        public void setUserLogsIsSet(boolean value) {
            if (!value) {
                this.userLogs = null;
            }
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_userLogs = true && (isSetUserLogs());
            list.add(present_userLogs);
            if (present_userLogs)
                list.add(userLogs);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof rtcStats_args)
                return this.equals((rtcStats_args) that);
            return false;
        }

        public boolean equals(rtcStats_args that) {
            if (that == null)
                return false;

            boolean this_present_userLogs = true && this.isSetUserLogs();
            boolean that_present_userLogs = true && that.isSetUserLogs();
            if (this_present_userLogs || that_present_userLogs) {
                if (!(this_present_userLogs && that_present_userLogs))
                    return false;
                if (!this.userLogs.equals(that.userLogs))
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("rtcStats_args(");
            boolean first = true;

            sb.append("userLogs:");
            if (this.userLogs == null) {
                sb.append("null");
            } else {
                sb.append(this.userLogs);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(rtcStats_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserLogs()).compareTo(other.isSetUserLogs());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserLogs()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLogs, other.userLogs);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_LOGS:
                    return isSetUserLogs();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_LOGS:
                    return getUserLogs();

            }
            throw new IllegalStateException();
        }

        public List<String> getUserLogs() {
            return this.userLogs;
        }

        public rtcStats_args setUserLogs(List<String> userLogs) {
            this.userLogs = userLogs;
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_LOGS:
                    if (value == null) {
                        unsetUserLogs();
                    } else {
                        setUserLogs((List<String>) value);
                    }
                    break;

            }
        }

        public rtcStats_args deepCopy() {
            return new rtcStats_args(this);
        }

        @Override
        public void clear() {
            this.userLogs = null;
        }

        public void unsetUserLogs() {
            this.userLogs = null;
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_LOGS((short) 1, "userLogs");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_LOGS
                        return USER_LOGS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class rtcStats_argsStandardSchemeFactory implements SchemeFactory {
            public rtcStats_argsStandardScheme getScheme() {
                return new rtcStats_argsStandardScheme();
            }
        }

        private static class rtcStats_argsStandardScheme extends StandardScheme<rtcStats_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rtcStats_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_LOGS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.userLogs = new ArrayList<String>(_list8.size);
                                    String _elem9;
                                    for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
                                        _elem9 = iprot.readString();
                                        struct.userLogs.add(_elem9);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUserLogsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rtcStats_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userLogs != null) {
                    oprot.writeFieldBegin(USER_LOGS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userLogs.size()));
                        for (String _iter11 : struct.userLogs) {
                            oprot.writeString(_iter11);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rtcStats_argsTupleSchemeFactory implements SchemeFactory {
            public rtcStats_argsTupleScheme getScheme() {
                return new rtcStats_argsTupleScheme();
            }
        }

        private static class rtcStats_argsTupleScheme extends TupleScheme<rtcStats_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rtcStats_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.userLogs = new ArrayList<String>(_list13.size);
                        String _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                            _elem14 = iprot.readString();
                            struct.userLogs.add(_elem14);
                        }
                    }
                    struct.setUserLogsIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rtcStats_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserLogs()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserLogs()) {
                    {
                        oprot.writeI32(struct.userLogs.size());
                        for (String _iter12 : struct.userLogs) {
                            oprot.writeString(_iter12);
                        }
                    }
                }
            }
        }

    }

    public static class rtcStats_result implements org.apache.thrift.TBase<rtcStats_result, rtcStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<rtcStats_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rtcStats_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new rtcStats_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new rtcStats_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rtcStats_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public rtcStats_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public rtcStats_result() {
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rtcStats_result(rtcStats_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof rtcStats_result)
                return this.equals((rtcStats_result) that);
            return false;
        }

        public boolean equals(rtcStats_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("rtcStats_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(rtcStats_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        public int getSuccess() {
            return this.success;
        }

        public rtcStats_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public rtcStats_result deepCopy() {
            return new rtcStats_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class rtcStats_resultStandardSchemeFactory implements SchemeFactory {
            public rtcStats_resultStandardScheme getScheme() {
                return new rtcStats_resultStandardScheme();
            }
        }

        private static class rtcStats_resultStandardScheme extends StandardScheme<rtcStats_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rtcStats_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rtcStats_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rtcStats_resultTupleSchemeFactory implements SchemeFactory {
            public rtcStats_resultTupleScheme getScheme() {
                return new rtcStats_resultTupleScheme();
            }
        }

        private static class rtcStats_resultTupleScheme extends TupleScheme<rtcStats_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rtcStats_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rtcStats_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }
        }

    }

    public static class batchStats_args implements org.apache.thrift.TBase<batchStats_args, batchStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchStats_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchStats_args");
        private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __START_ISSET_ID = 0;
        private static final int __SIZE_ISSET_ID = 1;

        static {
            schemes.put(StandardScheme.class, new batchStats_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new batchStats_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchStats_args.class, metaDataMap);
        }

        public int start; // required
        public int size; // required
        private byte __isset_bitfield = 0;

        public batchStats_args(
                int start,
                int size) {
            this();
            this.start = start;
            setStartIsSet(true);
            this.size = size;
            setSizeIsSet(true);
        }

        public batchStats_args() {
        }

        public void setStartIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
        }

        public void setSizeIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchStats_args(batchStats_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.start = other.start;
            this.size = other.size;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_start = true;
            list.add(present_start);
            if (present_start)
                list.add(start);

            boolean present_size = true;
            list.add(present_size);
            if (present_size)
                list.add(size);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof batchStats_args)
                return this.equals((batchStats_args) that);
            return false;
        }

        public boolean equals(batchStats_args that) {
            if (that == null)
                return false;

            boolean this_present_start = true;
            boolean that_present_start = true;
            if (this_present_start || that_present_start) {
                if (!(this_present_start && that_present_start))
                    return false;
                if (this.start != that.start)
                    return false;
            }

            boolean this_present_size = true;
            boolean that_present_size = true;
            if (this_present_size || that_present_size) {
                if (!(this_present_size && that_present_size))
                    return false;
                if (this.size != that.size)
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("batchStats_args(");
            boolean first = true;

            sb.append("start:");
            sb.append(this.start);
            first = false;
            if (!first) sb.append(", ");
            sb.append("size:");
            sb.append(this.size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(batchStats_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStart()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Returns true if field start is set (has been assigned a value) and false otherwise
         */
        public boolean isSetStart() {
            return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
        }

        /**
         * Returns true if field size is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSize() {
            return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case START:
                    return isSetStart();
                case SIZE:
                    return isSetSize();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case START:
                    return getStart();

                case SIZE:
                    return getSize();

            }
            throw new IllegalStateException();
        }

        public int getStart() {
            return this.start;
        }

        public batchStats_args setStart(int start) {
            this.start = start;
            setStartIsSet(true);
            return this;
        }

        public int getSize() {
            return this.size;
        }

        public batchStats_args setSize(int size) {
            this.size = size;
            setSizeIsSet(true);
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case START:
                    if (value == null) {
                        unsetStart();
                    } else {
                        setStart((Integer) value);
                    }
                    break;

                case SIZE:
                    if (value == null) {
                        unsetSize();
                    } else {
                        setSize((Integer) value);
                    }
                    break;

            }
        }

        public batchStats_args deepCopy() {
            return new batchStats_args(this);
        }

        @Override
        public void clear() {
            setStartIsSet(false);
            this.start = 0;
            setSizeIsSet(false);
            this.size = 0;
        }

        public void unsetStart() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
        }

        public void unsetSize() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            START((short) 1, "start"),
            SIZE((short) 2, "size");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // START
                        return START;
                    case 2: // SIZE
                        return SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class batchStats_argsStandardSchemeFactory implements SchemeFactory {
            public batchStats_argsStandardScheme getScheme() {
                return new batchStats_argsStandardScheme();
            }
        }

        private static class batchStats_argsStandardScheme extends StandardScheme<batchStats_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchStats_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // START
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.start = iprot.readI32();
                                struct.setStartIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.size = iprot.readI32();
                                struct.setSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchStats_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(START_FIELD_DESC);
                oprot.writeI32(struct.start);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(SIZE_FIELD_DESC);
                oprot.writeI32(struct.size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchStats_argsTupleSchemeFactory implements SchemeFactory {
            public batchStats_argsTupleScheme getScheme() {
                return new batchStats_argsTupleScheme();
            }
        }

        private static class batchStats_argsTupleScheme extends TupleScheme<batchStats_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchStats_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.start = iprot.readI32();
                    struct.setStartIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.size = iprot.readI32();
                    struct.setSizeIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchStats_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetStart()) {
                    optionals.set(0);
                }
                if (struct.isSetSize()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetStart()) {
                    oprot.writeI32(struct.start);
                }
                if (struct.isSetSize()) {
                    oprot.writeI32(struct.size);
                }
            }
        }

    }

    public static class batchStats_result implements org.apache.thrift.TBase<batchStats_result, batchStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchStats_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchStats_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new batchStats_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new batchStats_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchStats_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public batchStats_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public batchStats_result() {
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchStats_result(batchStats_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof batchStats_result)
                return this.equals((batchStats_result) that);
            return false;
        }

        public boolean equals(batchStats_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("batchStats_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(batchStats_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        public int getSuccess() {
            return this.success;
        }

        public batchStats_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public batchStats_result deepCopy() {
            return new batchStats_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class batchStats_resultStandardSchemeFactory implements SchemeFactory {
            public batchStats_resultStandardScheme getScheme() {
                return new batchStats_resultStandardScheme();
            }
        }

        private static class batchStats_resultStandardScheme extends StandardScheme<batchStats_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchStats_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchStats_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchStats_resultTupleSchemeFactory implements SchemeFactory {
            public batchStats_resultTupleScheme getScheme() {
                return new batchStats_resultTupleScheme();
            }
        }

        private static class batchStats_resultTupleScheme extends TupleScheme<batchStats_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchStats_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchStats_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }
        }

    }

    public static class getAdminNodeId_args implements org.apache.thrift.TBase<getAdminNodeId_args, getAdminNodeId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdminNodeId_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdminNodeId_args");
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAdminNodeId_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAdminNodeId_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminNodeId_args.class, metaDataMap);
        }

        public getAdminNodeId_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAdminNodeId_args(getAdminNodeId_args other) {
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAdminNodeId_args)
                return this.equals((getAdminNodeId_args) that);
            return false;
        }

        public boolean equals(getAdminNodeId_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAdminNodeId_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(getAdminNodeId_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public getAdminNodeId_args deepCopy() {
            return new getAdminNodeId_args(this);
        }

        @Override
        public void clear() {
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getAdminNodeId_argsStandardSchemeFactory implements SchemeFactory {
            public getAdminNodeId_argsStandardScheme getScheme() {
                return new getAdminNodeId_argsStandardScheme();
            }
        }

        private static class getAdminNodeId_argsStandardScheme extends StandardScheme<getAdminNodeId_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminNodeId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminNodeId_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAdminNodeId_argsTupleSchemeFactory implements SchemeFactory {
            public getAdminNodeId_argsTupleScheme getScheme() {
                return new getAdminNodeId_argsTupleScheme();
            }
        }

        private static class getAdminNodeId_argsTupleScheme extends TupleScheme<getAdminNodeId_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAdminNodeId_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAdminNodeId_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getAdminNodeId_result implements org.apache.thrift.TBase<getAdminNodeId_result, getAdminNodeId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdminNodeId_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdminNodeId_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new getAdminNodeId_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAdminNodeId_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminNodeId_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public getAdminNodeId_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public getAdminNodeId_result() {
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAdminNodeId_result(getAdminNodeId_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAdminNodeId_result)
                return this.equals((getAdminNodeId_result) that);
            return false;
        }

        public boolean equals(getAdminNodeId_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAdminNodeId_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(getAdminNodeId_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        public int getSuccess() {
            return this.success;
        }

        public getAdminNodeId_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public getAdminNodeId_result deepCopy() {
            return new getAdminNodeId_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getAdminNodeId_resultStandardSchemeFactory implements SchemeFactory {
            public getAdminNodeId_resultStandardScheme getScheme() {
                return new getAdminNodeId_resultStandardScheme();
            }
        }

        private static class getAdminNodeId_resultStandardScheme extends StandardScheme<getAdminNodeId_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminNodeId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminNodeId_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAdminNodeId_resultTupleSchemeFactory implements SchemeFactory {
            public getAdminNodeId_resultTupleScheme getScheme() {
                return new getAdminNodeId_resultTupleScheme();
            }
        }

        private static class getAdminNodeId_resultTupleScheme extends TupleScheme<getAdminNodeId_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAdminNodeId_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAdminNodeId_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }
        }

    }

    public static class getHealthStatus_args implements org.apache.thrift.TBase<getHealthStatus_args, getHealthStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHealthStatus_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHealthStatus_args");
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getHealthStatus_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getHealthStatus_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHealthStatus_args.class, metaDataMap);
        }

        public getHealthStatus_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHealthStatus_args(getHealthStatus_args other) {
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getHealthStatus_args)
                return this.equals((getHealthStatus_args) that);
            return false;
        }

        public boolean equals(getHealthStatus_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getHealthStatus_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(getHealthStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public getHealthStatus_args deepCopy() {
            return new getHealthStatus_args(this);
        }

        @Override
        public void clear() {
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getHealthStatus_argsStandardSchemeFactory implements SchemeFactory {
            public getHealthStatus_argsStandardScheme getScheme() {
                return new getHealthStatus_argsStandardScheme();
            }
        }

        private static class getHealthStatus_argsStandardScheme extends StandardScheme<getHealthStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHealthStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHealthStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHealthStatus_argsTupleSchemeFactory implements SchemeFactory {
            public getHealthStatus_argsTupleScheme getScheme() {
                return new getHealthStatus_argsTupleScheme();
            }
        }

        private static class getHealthStatus_argsTupleScheme extends TupleScheme<getHealthStatus_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHealthStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHealthStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getHealthStatus_result implements org.apache.thrift.TBase<getHealthStatus_result, getHealthStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHealthStatus_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHealthStatus_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new getHealthStatus_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getHealthStatus_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHealthStatus_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public getHealthStatus_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public getHealthStatus_result() {
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHealthStatus_result(getHealthStatus_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getHealthStatus_result)
                return this.equals((getHealthStatus_result) that);
            return false;
        }

        public boolean equals(getHealthStatus_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getHealthStatus_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(getHealthStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        public int getSuccess() {
            return this.success;
        }

        public getHealthStatus_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public getHealthStatus_result deepCopy() {
            return new getHealthStatus_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getHealthStatus_resultStandardSchemeFactory implements SchemeFactory {
            public getHealthStatus_resultStandardScheme getScheme() {
                return new getHealthStatus_resultStandardScheme();
            }
        }

        private static class getHealthStatus_resultStandardScheme extends StandardScheme<getHealthStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHealthStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHealthStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHealthStatus_resultTupleSchemeFactory implements SchemeFactory {
            public getHealthStatus_resultTupleScheme getScheme() {
                return new getHealthStatus_resultTupleScheme();
            }
        }

        private static class getHealthStatus_resultTupleScheme extends TupleScheme<getHealthStatus_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHealthStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHealthStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }
        }

    }

    public static class getJobStatus_args implements org.apache.thrift.TBase<getJobStatus_args, getJobStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatus_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_args");
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getJobStatus_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getJobStatus_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_args.class, metaDataMap);
        }

        public getJobStatus_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getJobStatus_args(getJobStatus_args other) {
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getJobStatus_args)
                return this.equals((getJobStatus_args) that);
            return false;
        }

        public boolean equals(getJobStatus_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getJobStatus_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(getJobStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public getJobStatus_args deepCopy() {
            return new getJobStatus_args(this);
        }

        @Override
        public void clear() {
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getJobStatus_argsStandardSchemeFactory implements SchemeFactory {
            public getJobStatus_argsStandardScheme getScheme() {
                return new getJobStatus_argsStandardScheme();
            }
        }

        private static class getJobStatus_argsStandardScheme extends StandardScheme<getJobStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getJobStatus_argsTupleSchemeFactory implements SchemeFactory {
            public getJobStatus_argsTupleScheme getScheme() {
                return new getJobStatus_argsTupleScheme();
            }
        }

        private static class getJobStatus_argsTupleScheme extends TupleScheme<getJobStatus_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getJobStatus_result implements org.apache.thrift.TBase<getJobStatus_result, getJobStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatus_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new getJobStatus_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getJobStatus_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public getJobStatus_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public getJobStatus_result() {
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getJobStatus_result(getJobStatus_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getJobStatus_result)
                return this.equals((getJobStatus_result) that);
            return false;
        }

        public boolean equals(getJobStatus_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getJobStatus_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        @Override
        public int compareTo(getJobStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        public int getSuccess() {
            return this.success;
        }

        public getJobStatus_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public getJobStatus_result deepCopy() {
            return new getJobStatus_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getJobStatus_resultStandardSchemeFactory implements SchemeFactory {
            public getJobStatus_resultStandardScheme getScheme() {
                return new getJobStatus_resultStandardScheme();
            }
        }

        private static class getJobStatus_resultStandardScheme extends StandardScheme<getJobStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getJobStatus_resultTupleSchemeFactory implements SchemeFactory {
            public getJobStatus_resultTupleScheme getScheme() {
                return new getJobStatus_resultTupleScheme();
            }
        }

        private static class getJobStatus_resultTupleScheme extends TupleScheme<getJobStatus_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }
        }

    }

}
